from cv2 import imshow
import numpy as np
import cv2 as cv
from PIL import Image
from cv2 import threshold
from cv2 import imwrite
from numpy import uint, uint8
import numpy



def noise_reducer_cv(image,dilate_iteration=1,erode_iteration=1):
    """noise_reducer_cv(...)
            
            reduces noise in a given image
            image: image type ( opened using the OpenCV's - cv.imread - function ) contains potential noise that should be removed
            dilate_iteration: integer representing how many interations when calling the - cv.dilate - function, 1 by default
            erode_iteration: integer representing how many interations when calling the - cv.erode - function, 1 by default
    """
    kernel= np.ones((1,1), numpy.uint8) 
    image=cv.dilate(image,kernel,dilate_iteration) 
    kernel= np.ones((1,1), numpy.uint8)
    image=cv.erode(image,kernel,erode_iteration)
    image=cv.morphologyEx(image,cv.MORPH_CLOSE,kernel)
    image=cv.medianBlur(image, 3)
    return (image)
    
def thin_font_cv(image):
    """thin_font_cv(...)
        
            uses the OpenCV's - cv.erode - function inorder to make text in an image thinner
            image: image type ( opened using -cv.imread - function ) 
    """
    import numpy as np
    image=cv.bitwise_not(image)
    kernel=np.ones((2,2), np.uint8)
    image= cv.erode(image,kernel,iterations=1)
    image=cv.bitwise_not(image)
    return (image)
    
def dynamic_resize(image,static=0,height_portrait=8465,height_landscape=8465):
    """dynamic_resize(...)
    
             does a complex resizing operation using OpenCV's - cv.resize - function
             the concept is the following: inorder to apply certain filters on a given image, 
             the image must contain at least a - well chosen - number of pixels, because 
             if that number was too low, the outcome of the filter applied on to the image 
             would not be as expected, so we need to increase the number of pixels,
             and that is by resizing it ( upscaling it ), at the same time we do not want the 
             image to get too big, so that it can be processed faster, and then we won't end 
             up having huge files.
              
             the desired number of pixels is defined by the height of the image with the desired size
             
             image: image type ( opened using -cv.imread - function ) 
             static: positive integer, by default at 0 if we want dynamic_resize, different from 0 if want 
             to force all the images to be resize (upscaled), - static- would then present the resizing factor
             height_portrait: the best height to compare with when having portrait images, by 
             default is 8465, for newspaper pages
             height_landscape: the best height to compare with when having portrait images, by 
             default is 8465, for newspaper pages
    """
    height=image.shape[0]
    width=image.shape[1]
    # case of dynamic resize
    if not static:   
        if height>=width:
            #the analysed image is in portrait
            n=height_portrait//height
        else:   
            #the analysed image is in landscape
            n=height_landscape//height
    # case of static resize
    else:
        n=static
    # applying the resizing function
    return cv.resize(image, (0, 0), n , n)
    
    
  #function to convert a coloured image to a gray image 
def gray_image_cv(image): 
    return cv.cvtColor(image,cv.COLOR_BGR2GRAY)
    
 
 
  #thresholding function : this function makes a large diffrence in the image quality using black/white_factor,the larger white/black factor value --> the clearer      
  #black/white pixel i.e: if black_factor=200 --> the characters will be more filled with balck pixels --> same thing with the white_factor.
  #we recommend using : black_factor 150-210 , white_factor 230-250 .
  
def thresholded_img(image,black_factor=202,white_factor=253):
    thres,mono_image=threshold(image,black_factor,white_factor,cv.THRESH_BINARY) #adjusting the threshold
    return (thres,mono_image)
    
    
  # sharpening function : there are no parameteres to manipulate, we recommend using it as it is .
def sharpened_img(image,sharpening_filter=np.array([[-1,-1,-1],[-1,9,-1],[-1,-1,-1]])):
    sharp_img=cv.filter2D(image,-1,sharpening_filter)
    return sharp_img



image=dynamic_resize(image) 

gray_image=gray_image_cv(image)   #converting the image color to gray - YES -

mono_image=thresholded_img(gray_image)
no_noise_image=noise_reducer_cv(mono_image) 

eroded_image=thin_font_cv(no_noise_image) 

final_result=sharpened_img(eroded_image)



resized_result = cv.resize(final_result,(0, 0), fx=0.33, fy=0.33)

imwrite('final_result.png',final_result) 


cv.waitKey(0)

